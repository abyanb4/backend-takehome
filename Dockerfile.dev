FROM golang:1.21.0-alpine

# # Install Air
# RUN go install github.com/cosmtrek/air@v1.45.0

# Set timezone
ENV TZ=UTC

# Install tzdata package to set timezone and curl for downloading
RUN apk update && apk add --no-cache tzdata curl tar

# Configure the timezone
RUN ln -sf /usr/share/zoneinfo/UTC /etc/localtime && echo "UTC" > /etc/timezone

# Install required packages
RUN apk add --no-cache git

# Determine architecture and download appropriate golang-migrate
RUN ARCH=$(uname -m) && \
    case $ARCH in \
        x86_64) \
            GOARCH=amd64 \
            ;; \
        aarch64|arm64) \
            GOARCH=arm64 \
            ;; \
        *) \
            echo "Unsupported architecture: $ARCH" \
            exit 1 \
            ;; \
    esac && \
    curl -L https://github.com/golang-migrate/migrate/releases/download/v4.16.1/migrate.linux-${GOARCH}.tar.gz | tar xz -C /usr/local/bin/ && \
    chmod +x /usr/local/bin/migrate

# Install golang-migrate for ARM architecture
# RUN curl -L  | tar xz -C /usr/local/bin/ && \
#     chmod +x /usr/local/bin/migrate

WORKDIR /app

# Copy go.mod and go.sum files first to cache dependencies
# if you using arm you can use this and not re init module on line 50
COPY go.mod ./
COPY go.sum ./
RUN go mod download

# Copy the rest of the application source code
COPY . .

# remove and re-init package because the we can either use arm or x86
# RUN rm go.mod
# RUN rm go.sum
# RUN go mod init backend-takehome
# RUN go mod tidy

RUN chmod +x ./entrypoint.sh

RUN go build -o main ./cmd/http/

EXPOSE 8080

ENTRYPOINT ["/app/entrypoint.sh"]


# Default command to run Air
# CMD ["air", "-c", ".air.tomlj"]
